{
  "hash": "51ef0c85ad07063db46cb127e4d78de3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"first\"\nformat: \n  html:\n    embed-resources: true\nparams:\n  downsample_size: 100\n---\n\n::: {.cell title='setup'}\n\n```{.r .cell-code}\nlibrary(Seurat)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: SeuratObject\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: sp\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'SeuratObject'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, t\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyseurat)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: ttservice\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n========================================\ntidyseurat version 0.8.0\nIf you use TIDYSEURAT in published research, please cite:\n\nMangiola et al. Interfacing Seurat with the R tidy universe. Bioinformatics 2021.\n\nThis message can be suppressed by:\n  suppressPackageStartupMessages(library(tidyseurat))\n  \nTo restore the Seurat default display use options(\"restore_Seurat_show\" = TRUE) \n========================================\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'tidyseurat'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:ttservice':\n\n    plot_ly\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'lubridate' was built under R version 4.4.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ lubridate 1.9.4     ✔ stringr   1.5.1\n✔ purrr     1.0.2     ✔ tibble    3.2.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::bind_cols() masks ttservice::bind_cols()\n✖ dplyr::bind_rows() masks ttservice::bind_rows()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::lag()       masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(janitor)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at C:/Users/Danne/R_projects/quarto_reproducibility_workflow\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(stringr)\n#library(argparser)\n#parser <- arg_parser(\"Give input file path\") # define variables to be acessible via command line/ snakmake but with a default\n\nis_snakemake <- exists(\"snakemake\")\n```\n:::\n\n::: {.cell title='function'}\n\n```{.r .cell-code}\nreformat_to_snake_case <- function(char_vector) {\n  # Convert to lowercase\n  char_vector <- tolower(char_vector)\n  \n  # Replace special characters with spaces\n  char_vector <- str_replace_all(char_vector, \"[^a-z0-9]+\", \" \")\n  \n  # Trim leading and trailing whitespace\n  char_vector <- str_trim(char_vector)\n  \n  # Replace spaces with underscores to create snake case\n  char_vector <- str_replace_all(char_vector, \" \", \"_\")\n  \n  return(char_vector)\n}\n\n\n# Function to downsample a Seurat object\ndownsample_seurat <- function(seurat_obj, cells_per_ident = 100) {\n  # Get the cell names grouped by Ident\n  cell_groups <- split(Cells(seurat_obj), Idents(seurat_obj))\n  \n  # Downsample each group to the desired number of cells\n  sampled_cells <- unlist(lapply(cell_groups, function(cells) {\n    if (length(cells) > 0) { # Check if the group is not empty\n      if (length(cells) > cells_per_ident) {\n        sample(cells, cells_per_ident) # Randomly sample if more cells exist\n      } else {\n        cells # Retain all cells if fewer than required\n      }\n    } else {\n      NULL # Return NULL for empty groups\n    }\n  }))\n  \n  # Ensure there are no nulls and subset the Seurat object\n  sampled_cells <- sampled_cells[!is.null(sampled_cells)]\n  subset(seurat_obj, cells = sampled_cells)\n}\n```\n:::\n\n::: {.cell title='Load external data and reformat'}\n\n```{.r .cell-code}\nfilepath <- if (is_snakemake) snakemake@input else {\n  here(\"..\", \"..\",\n       \"raw_data\",\n       \"wendisch_et_al_final\",\n       \"oli_github\", \n       \"Monocytes.Rds\")} \n\ndat <- readRDS(filepath)\n\n\ndat$condition_clean <- reformat_to_snake_case(dat$condition )\n\nIdents(dat) <- \"condition_clean\"\n\ndat <- UpdateSeuratObject(dat)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nValidating object structure\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUpdating object slots\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nEnsuring keys are in the proper structure\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUpdating matrix keys for DimReduc 'pca'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUpdating matrix keys for DimReduc 'umap'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Assay RNA changing from Assay to Assay\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Assay SCoV2 changing from Assay to Assay\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Assay HTO changing from Assay to Assay\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Assay ADT changing from Assay to Assay\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Assay SCT changing from Assay to Assay\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: DimReduc pca changing from DimReduc to DimReduc\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: DimReduc umap changing from DimReduc to DimReduc\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nEnsuring keys are in the proper structure\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nEnsuring feature names don't have underscores or pipes\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUpdating slots in RNA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUpdating slots in SCoV2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUpdating slots in HTO\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUpdating slots in ADT\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUpdating slots in SCT\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUpdating slots in pca\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUpdating slots in umap\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSetting umap DimReduc to global\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSetting assay used for NormalizeData.HTO to HTO\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSetting assay used for FindNeighbors.SCT.pca to SCT\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNo assay information could be found for FindClusters\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Adding a command log without an assay associated with it\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSetting assay used for NormalizeData.ADT to ADT\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSetting assay used for Seurat..SCTransform.RNA to RNA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSetting assay used for RunPCA.SCT to SCT\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSetting assay used for RunUMAP.SCT.pca to SCT\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nValidating object structure for Assay 'RNA'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nValidating object structure for Assay 'SCoV2'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nValidating object structure for Assay 'HTO'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nValidating object structure for Assay 'ADT'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nValidating object structure for Assay 'SCT'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nValidating object structure for DimReduc 'pca'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nValidating object structure for DimReduc 'umap'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nObject representation is consistent with the most current Seurat version\n```\n\n\n:::\n\n```{.r .cell-code}\ndat <- dat |> slice_sample(n=params$downsample_size)\n\nif (!file.exists(here(\"intermediate_data\"))) dir.create(\"intermediate_data\") #needed with snakemake?\n\nfile_name <- paste(\"small_seurat\", as.character(params$downsample_size), \"obj.rds\", sep = \"_\")\n\nwrite_rds(dat, here(\"intermediate_data\",file_name))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}